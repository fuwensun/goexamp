// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/fuwensun/goms/eGrpc/internal/server/grpc (interfaces: EgrpcClient)

// Package mock_grpc is a generated GoMock package.
package mock_grpc

import (
	context "context"
	grpc "github.com/fuwensun/goms/eGrpc/internal/server/grpc"
	gomock "github.com/golang/mock/gomock"
	grpc0 "google.golang.org/grpc"
	reflect "reflect"
)

// MockEgrpcClient is a mock of EgrpcClient interface
type MockEgrpcClient struct {
	ctrl     *gomock.Controller
	recorder *MockEgrpcClientMockRecorder
}

// MockEgrpcClientMockRecorder is the mock recorder for MockEgrpcClient
type MockEgrpcClientMockRecorder struct {
	mock *MockEgrpcClient
}

// NewMockEgrpcClient creates a new mock instance
func NewMockEgrpcClient(ctrl *gomock.Controller) *MockEgrpcClient {
	mock := &MockEgrpcClient{ctrl: ctrl}
	mock.recorder = &MockEgrpcClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEgrpcClient) EXPECT() *MockEgrpcClientMockRecorder {
	return m.recorder
}

// Ping mocks base method
func (m *MockEgrpcClient) Ping(arg0 context.Context, arg1 *grpc.Request, arg2 ...grpc0.CallOption) (*grpc.Reply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Ping", varargs...)
	ret0, _ := ret[0].(*grpc.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ping indicates an expected call of Ping
func (mr *MockEgrpcClientMockRecorder) Ping(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockEgrpcClient)(nil).Ping), varargs...)
}
