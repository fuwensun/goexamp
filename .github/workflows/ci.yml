name: ci
on: [push,pull_request]

env:
  DHUB: ${{ 'docker.io' }}
  DHUB_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DHUB_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  DHUB_NAMESPACE: ${{ secrets.DOCKER_USERNAME }}
  TEST_WITH_BASE_SERVER: ${{ 'yes' }}

  RHUB: ${{ 'docker.pkg.github.com' }}
  RHUB_USERNAME: ${{ github.repository_owner }}
  RHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  RSPACE: ${{ github.repository }}

jobs:

  env:
    name: env
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v2

    - name: Print env
      run: |
        whoami
        pwd
        which go
        which docker
        groups $(whoami)
        ls -a -l ./
        go env GOPROXY
        docker images
        git log -1 --oneline

        echo "==> github.repository_owner: ${{ github.repository_owner }}"
        echo "==> github.repository: ${{ github.repository }}"
        echo "==> github.ref: ${{ github.ref }}"

        echo "==> ${{ contains(github.ref, 'refs/heads/release') }}"
        echo "==> ${{ contains(github.ref, 'refs/tags/v') }}"

  run:
    name: run
    runs-on: ubuntu-latest
    services:
      mysql:
        image: dockerxpub/mysqltest:v2.2.4
        ports:
          - 3306:3306
      redis:
        image: dockerxpub/redistest:v1.4.4
        ports:
          - 6379:6379

    steps:
    - name: Check out code
      uses: actions/checkout@v2

    - name: Build mock
      working-directory: tests/mock/build
      run: |
        docker login ${DHUB} -u ${DHUB_USERNAME} -p ${DHUB_PASSWORD}
        chmod +x build.sh && ./build.sh

    - name: Build
      working-directory: build
      run: |
        bash build.sh "compile"

    - name: Unit test
      working-directory: tests/unit
      run: |
        bash run.sh

    - name: Integration test
      working-directory: tests/integration
      run: |
        source install.sh
        bash run.sh
        cat test.log

    - name: Release
      working-directory: build
      run: |
        docker login ${DHUB} -u ${DHUB_USERNAME} -p ${DHUB_PASSWORD}
        chmod +x build.sh && ./build.sh "docker" "push" "clean"

    - name: Release-GitHub
      if: startsWith(github.ref, 'refs/tags/v')
      working-directory: eApi/build
      run: |
        echo "${RHUB_TOKEN}" | docker login ${RHUB} -u ${RHUB_USERNAME} --password-stdin
        make release
